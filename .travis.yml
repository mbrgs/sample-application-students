language: java
jdk: oraclejdk8

# Define the services to use
services:
  - docker

before_install:
  - sudo service mysql stop
  - docker pull takimatraining/devops-training-db
  - docker run -d -p 127.0.0.1:3306:3306 takimatraining/devops-training-db


# Run Unit Test and Integration Tests
# The pipe (|) is useful to create multiline scripts
script:
  - mvn verify
  - |
    mvn clean install sonar:sonar \
    -Dsonar.projectKey=mbrgs_sample-application-students \
    -Dsonar.organization=mbrgs-github \
    -Dsonar.host.url=https://sonarcloud.io \
    -Dsonar.login=$SONAR_TOKEN

# Cache the .m2 folder to prevent redownloading dependencies on each build
cache:
  directories:
  - "$HOME/.m2/repository"

# Environment variables are strings (double quotes)
# Example:
# - secure: "DpR1th9rZvLMX0......"
env:
  global:
    - secure: "ca9x2Df73Zur4cuMJYcpHuTZ8qhKE5EtNiX4GzloiupqmAQHItRbRTYMqRDODiefu6MWbzoh2a36QrBXiDWdTuw0wmyxGjgj/KTBgNFU4E5hohMVLBs/E3m/47kK74g4tSxGq6ngwdUJjp0QESmdFr1CLwv4Y0ZP9zqdMXlErS++jDI5zzcD6XGwiUjTY8QbulX3P1hTsVc4iQrYKJjqn4L1iZYlk/Ic4inEb5iqXSEhjNOkFRe+OqR9J6S3hPr9vdjWDxpEhCah2YT1eUNM/5U8TsWxrILaRbiXmS4DUGwgX94P9n5u+CqF1EOOqXmivuER/Qr0lPbPfADuIhJGkQx3Lal53ocAL9EMs2b8T2UstHMqFsIGBv4FCNntCp9M2FUmoGsy3AdqVr9R5MeXva1O1I3GXEhDtqpHwBZMHd718rmmCqVVdXhPxfMtQg8brLNcRmVu6FgSXy4AGUarRsglmWcccReAwtE8TAOuLAM+XDq0Ryqkay/tO3DNBv4H1sP7YObWZTmm2WUZILfXho0fb9GRE3ERVRThHoAwS8V3oGi1QbXiCIoDbtomBC+gjRfE8TRjo31JGnBSwcMlWj+99lgVC87VgZdKQ5f8u2c2POltImjWAQMw+Ej3doaZPFFHPkJBkhX+DAsQA0IkaHFTh5LF/iLV3OMRV93vias="
    - secure: "sL6PUHYPZdXW43HMECeaOv5mbpArho5raEzakQ11m3sIAow20dsQaDupy9ufHinr6E5xueI4Xbxgp7nExSy1faoCMXLpBl/7k66aoK7pC2rxMDlMb26zKdztXn95GXN2bWyH388NeIDvNYN5T4H+m+0d7BdqsyQXdoUh0VNVewaFawEdBGpFmjp5qr1ZXSnV2m1oOMiBp7bKbo4zoaQtfk8CyZu3TzhaWCeI4M4HYZs+eHAsMGNthvPFDDEvH1pP1wgvUrMhE8+LWE7EIOJtx18RW8hXFS6j0b6EIG6CPF2w2n7eTIAAONgcukdiqDx4vSU/QKBIgsbnbQbWUv1CE+q3I7GNyP7eOsh/NqQ9nD526cqhZTigGuaIrHECmEsxGmrPUP+BVtYuYkAR+xiIGeN3zVNB2M20SEbLQkfHdsT9kpRPQf4Q6ZKgtrCwRAC/mKTrjTxU959zoW/thdj/0o3dHMcq168ir/mjdyHDPkYHFDoZbEU9aYodgzylowJ/ugi7nW6dL5wiJeVlpRlV0BYkMFsnn3v/85dSDaKRD495lYVF+fqW+Z9Vq5YCtS66yfaWHoHcVcYNz3AHvQraDgZrw+48fTcpTZzS7j406n7SIBu1OL0P/oiSXK2j7CWrn+KPTYNKqALwXrDDboS57H5MLqp6SRLVBSulIkVnSec="
    - secure: "VsL1tyxHLwJNknogttVhLP9Ivm6mYh5AzkBKIVqxozTASs+DhtCznoPN/FN7/SEnX39tgi4idnEtQRpBj9OMZZGKT3rCrRCNb5UbDSFtPAsD1jfbqI49r/ZWrhDSalWfXm6UaED9R/xRVaQDS/uSoVrQwuYXslbipoKASXqY7nx2JbPnr4t68eNSrl3V/0wtwcsWiZB+ETId043smEsNCtBQohL7GIEWaabLJ5gbRl7qil5bDw6K0jv+9SZt+8a6OBKwsDKhXM53eS8u2mWeG4ROcpmbgZlMTxHzc33kVPJcm3l77+izbt+Vn1cZzLLt2yXVMVMKNodcye8TD9RPRWMWpHyUz4zs0/lbt5eY+trWm7WdRGL5NcPGChtcPNf2jurzzED3KzAdeS97GWy6WGSdU2pdmxpabqa3ZSzIqb9mPgHtbCMYvUcFgXhpIT1V8kAUSDjb1eGvjCmtv+zzGc1je2P4a2ltmN9AEYCpSqTk7/kNt0Irw6yolT1RU/Y3n43oa/+5QHm100PzN0ZRzZ4tY4YlzKIbveXNIxf9loEo+iyzjeoKAOScYS28xWthd/FjXTJ87kXNH1ub/sy4K8y5WUD8rzNotucGl+BRcxftMjhdR1IshHeOyTTbn9scSDqRyewGMzN0CSlAhmnAN7+ALfhobBypgfjSslMw4OQ="

# Send an email to the commiter if the pipeline failed at some point
notifications:
  email:
    on_failure: always

# Build an image containing the .jar and push it to the Docker Hub
after_success:
  # Login to Docker hub
  - docker login -u $DOCKER_USER -p $DOCKER_PASS
  # Tag text according to the branch
  - export TAG=`if [ "$TRAVIS_BRANCH" == "master" ]; then echo "latest"; else echo $TRAVIS_BRANCH; fi`
  # Image name
  - export IMAGE_NAME=takimatraining/sample-application
  # Build the image (see Dockerfile) and tag it with the commit ID
  - docker build -t $IMAGE_NAME:$TRAVIS_COMMIT .
  # Retag the image with the previously choosen tag
  - docker tag $IMAGE_NAME:$TRAVIS_COMMIT $IMAGE_NAME:$TAG
  # Push the tagged image to Docker Hub
  - docker push $IMAGE_NAME:$TAG